#!/usr/bin/perl

use strict;

use IO::File;
use Data::Dumper;
use Getopt::Long;

my $min_seen = 0;
my $distance = 0;
my $strip = -1;

GetOptions("minvar=i"=>\$min_seen, "distance"=>\$distance, "strip!"=>\$strip);

die "Usage: $0 [opts] varcall-files...
    -m      Minimum number of samples with a variant (1)
    -d      Output a distance matrix instead (1=het, 2=hom, 3=indel)
" if !@ARGV;

my @in;  my $i = 0;
for (@ARGV) {
    open($in[$i++], "$_")||die"$_:$!\n";
}

# print header
print "chr\tpos\tref" if !$distance;
print "chr-pos" if $distance;
# strip common path info
my $pre = common_prefix(@ARGV); $pre =~ s/[^\/]+$//; $pre = quotemeta($pre);
my $suf = common_suffix(@ARGV); $suf =~ s/^[^.]+//; $suf = quotemeta($suf);
for (my $i = 0; $i < @in; ++$i ){
    print "\t";
    my $th = $ARGV[$i];
    if ($strip == -1) {
        $th =~ s/^$pre//;
    } elsif ($strip) {
        $th =~ s/^.*\///;
    }
    $th =~ s/$suf$//;
    print $th;
}
print "\n";

my $ok = 1;
my @keep;
while ($ok) {
$ok = 0;

my ($l, @d);
my ($min_i, $min_id, $min_pos);
# for each file
for (my $i = 0; $i < @in; ++$i ) {
    # read if needed
    if (!defined($keep[$i])) {
        $l = $in[$i]->getline; chomp $l;
        next unless $l;
        # id, pos, ref, depth, skipped, pct, call1, call2...
        $d[$i] = [split /\t/, $l];
    } else {
        # reuse last rounds read
        $d[$i] = $keep[$i];
        next unless $d[$i];
    }
    # find the min id
    $ok = 1;
    if ( ( $d[$i][0] && !defined($min_id) ) ||
         ( chrlt($d[$i][0],$min_id) ) || 
         ( ($d[$i][0] eq $min_id) && ($d[$i][1] < $min_pos) )
       ) {
        # minimum id
        $min_i = $i;
        $min_id = $d[$i][0];
        $min_pos = $d[$i][1];
    }
}

last if !$ok;

die "Error: no id found: ", Dumper \@d if !$min_id;

my $seen;
for ($i = 0; $i < @in; ++$i ){
    if ($d[$i] && ($d[$i][0] eq $min_id && $d[$i][1] eq $min_pos) ) {
        ++$seen;
        $keep[$i] = undef;                  # read next
    } else {
        $keep[$i] = $d[$i];                 # don't read
    }
}

# if you don't see enough in common, skip
if ($seen < $min_seen) {
    next;
}


# print the variant
my $ref = $d[$min_i][2];
print "$min_id-$min_pos\t", $ref if $distance;
print "$min_id\t$min_pos" if !$distance;

for ($i = 0; $i < @in; ++$i ){
    print "\t";
    if ($d[$i] && ($d[$i][0] eq $min_id && $d[$i][1] eq $min_pos) ) {
        # output data
        # todo support alternate matrix formats
        my $count = $#{$d[$i]};
        if ($distance) {
            for (@{$d[$i]}[6 .. $count]) {
                $distance = 2;
                if (uc($ref) eq substr($_,0,1)) {
                    --$distance;
                }
                if (substr($_,0,1) eq '*') {
                    ++$distance;
                }
                if (substr($_,0,1) eq '+') {
                    ++$distance;
                }
            }
            print $distance;
        } else {
            print join ";", sort { substr($b,index($b,':')+1) <=> substr($a,index($a,':')+1) } @{$d[$i]}[6 .. $count];
        }
    } else {
        # output blank, keep read for later
        if ($distance) {
            print 0;
        } else {
            print "";
        }
    }
}

print "\n";

};


sub common_suffix {
    my $comm = shift @_;
    while ($_ = shift @_) {
        $_ = substr($_,-length($comm)) if (length($_) > length($comm));
        $comm = substr($comm,-length($_)) if (length($_) < length($comm));
        if (( $_ ^ $comm ) =~ /(\0*)$/) {
            $comm = substr($comm, -length($1));
        } else {
            return undef;
        }
    }
    return $comm;
}

sub common_prefix {
    my $comm = shift @_;
    while ($_ = shift @_) {
        $_ = substr($_,0,length($comm)) if (length($_) > length($comm));
        $comm = substr($comm,0,length($_)) if (length($_) < length($comm));
        if (( $_ ^ $comm ) =~ /^(\0*)/) {
            $comm = substr($comm, 0, length($1));
        } else {
            return undef;
        }
    }
    return $comm;
}

sub chrlt {
    my ($a, $b) = @_;
    $a =~ tr/:/\0/;
    $b =~ tr/:/\0/;
    return $a lt $b;
}

